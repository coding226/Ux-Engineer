<script>
window.onload = function(){
    // your code

// Use local storage to temporarily persist data
window.localStorage.setItem("storedPersons", JSON.stringify(people));

document.getElementById("roles-form").style.display = "none";
document.getElementById("alertstart").style.display = "block";
// Get the currently selected active person
let radios = document.forms["person-form"].elements["employee"];
for (var i = 0, max = radios.length; i < max; i++) {
    radios[i].onclick = function () {
        document.getElementById("alert").innerHTML = "";
        document.getElementById("alertstart").style.display = "none";
        document.getElementById("roles-form").style.display = "block";
        activePersonId = this.value;

        // Access the stored people
        let accessedPersons = JSON.parse(
            window.localStorage.getItem("storedPersons")
        );

        // get the data for the active person from the json
        function getPersonData(personID) {
            for (const person of accessedPersons) {
                if (person.id == personID) {
                    return person;
                }
            }
        }

        let activePerson = getPersonData(activePersonId);

        // Put the active person's name at the top and their employment history in the page
        document.getElementById("active-person").innerHTML =
            "Edit team member: " + activePerson.name;

        function addRow(tableID, label, sDate, eDate) {
            // Get a reference to the table
            let tableRef = document.getElementById(tableID);

            // Insert a row at the end of the table
            let newRow = tableRef.insertRow(-1);

            // Insert three cells in the row
            let newCellLabel = newRow.insertCell(0);
            let newCellSd = newRow.insertCell(1);
            let newCellEd = newRow.insertCell(2);

            // Append a text node to the cell
            let labelText = document.createTextNode(label);
            newCellLabel.appendChild(labelText);
            let sdText = document.createTextNode(sDate);
            newCellSd.appendChild(sdText);

            newCellEd.setAttribute("class", "ui input");
            // Make the end date picker available
            let eDatePicker = document.createElement("input");
            eDatePicker.setAttribute("type", "date");
            eDatePicker.setAttribute("name", "end-date");
            eDatePicker.setAttribute("id", "end-date");
            eDatePicker.setAttribute("value", "0");

            // If no end date, pull in the date picker
            let edText = document.createTextNode(eDate);
            if (eDate != "") {
                newCellEd.appendChild(edText);
                document.getElementById("select-action").style.display = "none";
            } else {
                newCellEd.appendChild(eDatePicker);
                document.getElementById("select-action").style.display = "table-row";
            }
        }


        // Empty the tables on person change
        document.getElementById("role-table-body").innerHTML = "";
        document.getElementById("new-role-start").value = "";

        for (role of activePerson.roles) {
            // Call addRow() with the table's ID and the role data
            addRow("role-table-body", role.role, role.roleStart, role.roleEnd);
        }

        document.getElementById("add-role").style.display = "none";
        document.getElementById("add-role-btn").style.display = "none";
        // Allow the form to change the active person's history
        const saveBtn = document.getElementById("role-save");
        const cancelBtn = document.getElementById("cancel-btn");
        const assignBtn = document.getElementById("assign-btn");
        const deleteBtn = document.getElementById("del-btn");
        const newStartDate = document.getElementById("new-role-start");
        const newEndDate = document.getElementById("new-role-end");
        const endRole = document.getElementById("end-date");
        const newRoleName = document.getElementById("role-select");
        cancelBtn.style.display ="inline-block";
        function assignrole() {
            document.getElementById("select-action").style.display = "none";
            document.getElementById("add-role").style.display = "table-row";
            document.getElementById("add-role-btn").style.display = "table-row";
        }
        function cancelrole() {
            document.getElementById("select-action").style.display = "table-row";
            document.getElementById("add-role").style.display = "none";
            document.getElementById("add-role-btn").style.display = "none";
        }
        function deleteData() {
            /* NOTE: not bothering to compare dates at this stage but in theory we would */

            let currentPerson = accessedPersons[activePersonId];

            console.log(currentPerson);

            // Check start date and set if specified
            let openRole = true;
            if (endRole.value.length == 0) {
                document.getElementById("alert").innerHTML = "<p class='ui ignored warning message'>Please select the end date of employment</p>";

            } else {
                // There is a new role start date: Create new role
                if (endRole.value.length != 0) {
                    if (confirm('Are you sure you want to delete this Person?')) {
                        // End date the previous role
                        // If previous role is end-dated save that date as a string
                        let previousRoleEndDate = document.createTextNode(endRole.value);


                        // Replace date input with date text
                        endRole.parentNode.replaceChild(previousRoleEndDate, endRole);

                        // Save the role end date to local storage
                        for (var i = 0; i < accessedPersons.length; i++) {
                            if (accessedPersons[i].id == currentPerson.id) {
                                let editPerson = accessedPersons[i];
                                // Find the role that needs end dating
                                console.log("We are looking at " + editPerson.name + " whose roles are:");
                                for (var j = 0; j < editPerson.roles.length; j++) {
                                    console.log(editPerson.roles[j]);
                                    if (editPerson.roles[j].roleEnd == "") {
                                        // Add the end date
                                        accessedPersons[i].roles[j].roleEnd = endRole.value;
                                        break;
                                    }
                                }
                                break;
                            }
                        }
                        document.getElementById("select-action").style.display = "none";
                        document.getElementById("alert").innerHTML = "<p class='ui ignored warning message'>Employee is dismissed</p>";
                    } else {
                        document.getElementById("alert").innerHTML = "";
                        console.log('nothing happen');
                    }

                }
            }

            // Save everyone back to storage
            window.localStorage.setItem(
                "storedPersons",
                JSON.stringify(accessedPersons)
            );

            // Empty the form
            document.getElementById("roles-form").reset();
        }
        function processData() {
            /* NOTE: not bothering to compare dates at this stage but in theory we would */

            let currentPerson = accessedPersons[activePersonId];

            console.log(currentPerson);

            // Check start date and set if specified
            let openRole = true;
            if (endRole.value.length == 0) {
                document.getElementById("alert").innerHTML = "<p class='ui ignored warning message'>Please select all feilds</p>";
            } else if(newRoleName.value == 0) {
                document.getElementById("alert").innerHTML = "<p class='ui ignored warning message'>Please select all feilds</p>";
            } else if(newStartDate.value == 0) {
                document.getElementById("alert").innerHTML = "<p class='ui ignored warning message'>Please select all feilds</p>";
            } else{
                // There is a new role start date: Create new role
                if (endRole.value.length != 0) {
                    // End date the previous role
                    // If previous role is end-dated save that date as a string
                    let previousRoleEndDate = document.createTextNode(endRole.value);

                    // Replace date input with date text
                    endRole.parentNode.replaceChild(previousRoleEndDate, endRole);
                    saveNewRole();
                    console.log("Old role end-dated");

                    // Save the role end date to local storage
                    for (var i = 0; i < accessedPersons.length; i++) {
                        if (accessedPersons[i].id == currentPerson.id) {
                            let editPerson = accessedPersons[i];
                            // Find the role that needs end dating
                            console.log("We are looking at " + editPerson.name + " whose roles are:");
                            for (var j = 0; j < editPerson.roles.length; j++) {
                                console.log(editPerson.roles[j]);
                                if (editPerson.roles[j].roleEnd == "") {
                                    // Add the end date
                                    accessedPersons[i].roles[j].roleEnd = endRole.value;
                                    break;
                                }
                            }
                            break;
                        }
                    }
                    document.getElementById("person"+currentPerson.id).click();
                } else {
                    // Haven't end dated previous role - two open roles not allowed
                    // The original UX allowed multiple roles open but the code would get too complicated for this exercise
                    alert("A person can only have one current role.");
                }
            }

            function saveNewRole() {
                // Display a new row with role, start date and input
                openRole = true;
                console.log("New Role saved");
                var actualRole = newRoleName.options[newRoleName.selectedIndex].text;
                addRow(
                    "role-table-body",
                    actualRole,
                    newStartDate.value,
                    newEndDate.value
                );

                let roleToSave = {
                    role: actualRole,
                    roleStart: newStartDate.value,
                    roleEnd: "",
                }
                // Save the new role to local storage
                accessedPersons[currentPerson.id].roles.push(roleToSave);
                console.log("New role saved to local storage: ");
                let personRoles = accessedPersons[currentPerson.id].roles
                console.log(personRoles[personRoles.length - 1]);
            }

            // Save everyone back to storage
            window.localStorage.setItem(
                "storedPersons",
                JSON.stringify(accessedPersons)
            );

            // Empty the form
            document.getElementById("roles-form").reset();
        }
        saveBtn.onclick = processData;
        deleteBtn.onclick = deleteData;
        assignBtn.onclick = assignrole;
        cancelBtn.onclick = cancelrole;

    };
}
};
</script>